diff --git a/Makefile b/Makefile
index 09d790c..fc103f0 100644
--- a/Makefile
+++ b/Makefile
@@ -181,6 +181,10 @@ UPROGS=\
 	_usertests\
 	_wc\
 	_zombie\
+	_helloworld\
+	_memsizetest\
+	_policy\
+	_sanity\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
@@ -250,7 +254,7 @@ qemu-nox-gdb: fs.img xv6.img .gdbinit
 EXTRA=\
 	mkfs.c ulib.c user.h cat.c echo.c forktest.c grep.c kill.c\
 	ln.c ls.c mkdir.c rm.c stressfs.c usertests.c wc.c zombie.c\
-	printf.c umalloc.c\
+	printf.c umalloc.c helloworld.c memsizetest.c policy.c sanity.c\
 	README dot-bochsrc *.pl toc.* runoff runoff1 runoff.list\
 	.gdbinit.tmpl gdbutil\
 
diff --git a/cat.c b/cat.c
index 5ddc820..e74de1a 100644
--- a/cat.c
+++ b/cat.c
@@ -12,12 +12,12 @@ cat(int fd)
   while((n = read(fd, buf, sizeof(buf))) > 0) {
     if (write(1, buf, n) != n) {
       printf(1, "cat: write error\n");
-      exit();
+      exit(1);
     }
   }
   if(n < 0){
     printf(1, "cat: read error\n");
-    exit();
+    exit(1);
   }
 }
 
@@ -28,16 +28,16 @@ main(int argc, char *argv[])
 
   if(argc <= 1){
     cat(0);
-    exit();
+    exit(0);
   }
 
   for(i = 1; i < argc; i++){
     if((fd = open(argv[i], 0)) < 0){
       printf(1, "cat: cannot open %s\n", argv[i]);
-      exit();
+      exit(1);
     }
     cat(fd);
     close(fd);
   }
-  exit();
+  exit(0);
 }
diff --git a/defs.h b/defs.h
index 82fb982..52502c2 100644
--- a/defs.h
+++ b/defs.h
@@ -104,7 +104,7 @@ int             pipewrite(struct pipe*, char*, int);
 //PAGEBREAK: 16
 // proc.c
 int             cpuid(void);
-void            exit(void);
+void            exit(int);
 int             fork(void);
 int             growproc(int);
 int             kill(int);
@@ -117,9 +117,15 @@ void            sched(void);
 void            setproc(struct proc*);
 void            sleep(void*, struct spinlock*);
 void            userinit(void);
-int             wait(void);
+int             wait(int*);
 void            wakeup(void*);
 void            yield(void);
+//@@ Setter for accumulator function (new process and blocked process)
+void            set_accumulator(struct proc*);
+//@@ Update proc times (every clock tick) 
+void 			update_proc_times(void);
+//@@ Getter for the ratio time of a process
+float			get_ratio_time(struct proc*);
 
 // swtch.S
 void            swtch(struct context**, struct context*);
@@ -188,3 +194,5 @@ void            clearpteu(pde_t *pgdir, char *uva);
 
 // number of elements in fixed-size array
 #define NELEM(x) (sizeof(x)/sizeof((x)[0]))
+
+int sched_type;
diff --git a/echo.c b/echo.c
index 806dee0..eed68a0 100644
--- a/echo.c
+++ b/echo.c
@@ -9,5 +9,5 @@ main(int argc, char *argv[])
 
   for(i = 1; i < argc; i++)
     printf(1, "%s%s", argv[i], i+1 < argc ? " " : "\n");
-  exit();
+  exit(0);
 }
diff --git a/forktest.c b/forktest.c
index 8bc984d..98b159c 100644
--- a/forktest.c
+++ b/forktest.c
@@ -17,6 +17,7 @@ void
 forktest(void)
 {
   int n, pid;
+  int status;
 
   printf(1, "fork test\n");
 
@@ -25,24 +26,24 @@ forktest(void)
     if(pid < 0)
       break;
     if(pid == 0)
-      exit();
+      exit(0);
   }
 
   if(n == N){
     printf(1, "fork claimed to work N times!\n", N);
-    exit();
+    exit(1);
   }
 
   for(; n > 0; n--){
-    if(wait() < 0){
+    if(wait(&status) < 0){
       printf(1, "wait stopped early\n");
-      exit();
+      exit(1);
     }
   }
 
-  if(wait() != -1){
+  if(wait(&status) != -1){
     printf(1, "wait got too many\n");
-    exit();
+    exit(1);
   }
 
   printf(1, "fork test OK\n");
@@ -52,5 +53,5 @@ int
 main(void)
 {
   forktest();
-  exit();
+  exit(0);
 }
diff --git a/grep.c b/grep.c
index adc4835..d354f2a 100644
--- a/grep.c
+++ b/grep.c
@@ -43,24 +43,24 @@ main(int argc, char *argv[])
 
   if(argc <= 1){
     printf(2, "usage: grep pattern [file ...]\n");
-    exit();
+    exit(1);
   }
   pattern = argv[1];
 
   if(argc <= 2){
     grep(pattern, 0);
-    exit();
+    exit(0);
   }
 
   for(i = 2; i < argc; i++){
     if((fd = open(argv[i], 0)) < 0){
       printf(1, "grep: cannot open %s\n", argv[i]);
-      exit();
+      exit(1);
     }
     grep(pattern, fd);
     close(fd);
   }
-  exit();
+  exit(0);
 }
 
 // Regexp matcher from Kernighan & Pike,
diff --git a/helloworld.c b/helloworld.c
new file mode 100644
index 0000000..d318bff
--- /dev/null
+++ b/helloworld.c
@@ -0,0 +1,10 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int
+main(int argc, char *argv[])
+{
+	printf(1, "%s", "Hello World Xv6\n");
+  exit(0);
+}
diff --git a/init.c b/init.c
index 046b551..f7d0658 100644
--- a/init.c
+++ b/init.c
@@ -11,6 +11,7 @@ int
 main(void)
 {
   int pid, wpid;
+  int status;
 
   if(open("console", O_RDWR) < 0){
     mknod("console", 1, 1);
@@ -24,14 +25,14 @@ main(void)
     pid = fork();
     if(pid < 0){
       printf(1, "init: fork failed\n");
-      exit();
+      exit(1);
     }
     if(pid == 0){
       exec("sh", argv);
       printf(1, "init: exec sh failed\n");
-      exit();
+      exit(1);
     }
-    while((wpid=wait()) >= 0 && wpid != pid)
+    while((wpid=wait(&status)) >= 0 && wpid != pid)
       printf(1, "zombie!\n");
   }
 }
diff --git a/kill.c b/kill.c
index 364f6af..875916c 100644
--- a/kill.c
+++ b/kill.c
@@ -9,9 +9,9 @@ main(int argc, char **argv)
 
   if(argc < 2){
     printf(2, "usage: kill pid...\n");
-    exit();
+    exit(1);
   }
   for(i=1; i<argc; i++)
     kill(atoi(argv[i]));
-  exit();
+  exit(0);
 }
diff --git a/ln.c b/ln.c
index cf8a64e..3188e3e 100644
--- a/ln.c
+++ b/ln.c
@@ -7,9 +7,9 @@ main(int argc, char *argv[])
 {
   if(argc != 3){
     printf(2, "Usage: ln old new\n");
-    exit();
+    exit(1);
   }
   if(link(argv[1], argv[2]) < 0)
     printf(2, "link %s %s: failed\n", argv[1], argv[2]);
-  exit();
+  exit(1);
 }
diff --git a/ls.c b/ls.c
index 2862913..27742c2 100644
--- a/ls.c
+++ b/ls.c
@@ -77,9 +77,9 @@ main(int argc, char *argv[])
 
   if(argc < 2){
     ls(".");
-    exit();
+    exit(0);
   }
   for(i=1; i<argc; i++)
     ls(argv[i]);
-  exit();
+  exit(0);
 }
diff --git a/memsizetest.c b/memsizetest.c
new file mode 100644
index 0000000..ab54cef
--- /dev/null
+++ b/memsizetest.c
@@ -0,0 +1,21 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+#define K (1024)
+
+int
+main(int argc, char *argv[])
+{
+
+	//printf(1, "%s%d%s", "The process is using: ", memsize() ,"B \n");
+    printf(1, "The process is using: %dB \n",memsize());
+  	printf(1,"Allocateing more memory\n");
+  	//need to check the malloc size 
+      char* array1 = (char*) malloc(2048*sizeof(char));
+      printf(1, "The process is using: %dB \n",memsize());
+      printf(1,"Freeing memory\n");
+      free(array1);
+      printf(1, "The process is using: %dB \n",memsize());
+
+  exit(0);
+}
\ No newline at end of file
diff --git a/mkdir.c b/mkdir.c
index 6e4c954..2d90781 100644
--- a/mkdir.c
+++ b/mkdir.c
@@ -9,7 +9,7 @@ main(int argc, char *argv[])
 
   if(argc < 2){
     printf(2, "Usage: mkdir files...\n");
-    exit();
+    exit(1);
   }
 
   for(i = 1; i < argc; i++){
@@ -19,5 +19,5 @@ main(int argc, char *argv[])
     }
   }
 
-  exit();
+  exit(0);
 }
diff --git a/policy.c b/policy.c
new file mode 100644
index 0000000..4e3887b
--- /dev/null
+++ b/policy.c
@@ -0,0 +1,40 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+//enum scheduling_policy{defualt_policy, priority_scheduling, CFS};
+
+int
+main(int argc, char **argv)
+{
+	int policy_number;
+
+	if(argc < 2){
+    	printf(1, "No policy entered!\n");
+    	exit(1);
+    }
+
+    if(argc > 2){
+    	printf(1, "Too many arguments!\n");
+    	exit(1);
+    }
+
+    policy_number = atoi(argv[1]);
+    if (policy(policy_number) == 0){
+      if(policy_number == 0){
+          printf(1, "Policy has been successfully changed to Default Policy\n");
+
+      }else if(policy_number == 1){
+          printf(1, "Policy has been successfully changed to Priority Policy\n");
+
+      }else if(policy_number == 2){
+          printf(1, "Policy has been successfully changed to CFS Policy\n");
+      }
+
+      exit(0);
+   	}
+   	else{
+   		printf(1, "Error replacing policy, no such a policy number(%d)\n",policy_number);
+   		exit(1);
+   	}
+}
\ No newline at end of file
diff --git a/proc.c b/proc.c
index 806b1b1..e312ce0 100644
--- a/proc.c
+++ b/proc.c
@@ -7,6 +7,8 @@
 #include "proc.h"
 #include "spinlock.h"
 
+enum scheduling_policy{defualt_policy, priority_scheduling, CFS};
+
 struct {
   struct spinlock lock;
   struct proc proc[NPROC];
@@ -88,7 +90,14 @@ allocproc(void)
 found:
   p->state = EMBRYO;
   p->pid = nextpid++;
+  //@@ Set the new proces's priority and accumulator.
+  p->ps_priority = 5;
+  set_accumulator(p);
+  //Task 4.2
+  //@@ 
+  p->cfs_priority = 2;
 
+  
   release(&ptable.lock);
 
   // Allocate kernel stack.
@@ -198,6 +207,8 @@ fork(void)
   }
   np->sz = curproc->sz;
   np->parent = curproc;
+  //@@ Copy the cfs_priority of the parent
+  np->cfs_priority = curproc->cfs_priority;
   *np->tf = *curproc->tf;
 
   // Clear %eax so that fork returns 0 in the child.
@@ -223,9 +234,9 @@ fork(void)
 
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
-// until its parent calls wait() to find out it exited.
+// until its parent calls wait(*int) to find out it exited.
 void
-exit(void)
+exit(int status)
 {
   struct proc *curproc = myproc();
   struct proc *p;
@@ -246,10 +257,11 @@ exit(void)
   iput(curproc->cwd);
   end_op();
   curproc->cwd = 0;
+  curproc->status = status;
 
   acquire(&ptable.lock);
 
-  // Parent might be sleeping in wait().
+  // Parent might be sleeping in wait(*int).
   wakeup1(curproc->parent);
 
   // Pass abandoned children to init.
@@ -270,7 +282,7 @@ exit(void)
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
 int
-wait(void)
+wait(int *status)
 {
   struct proc *p;
   int havekids, pid;
@@ -287,6 +299,8 @@ wait(void)
       if(p->state == ZOMBIE){
         // Found one.
         pid = p->pid;
+        if(status != null)
+          *status = p->status;
         kfree(p->kstack);
         p->kstack = 0;
         freevm(p->pgdir);
@@ -323,6 +337,7 @@ void
 scheduler(void)
 {
   struct proc *p;
+  struct proc *temp_p; //TODOC highest priority process
   struct cpu *c = mycpu();
   c->proc = 0;
   
@@ -330,11 +345,41 @@ scheduler(void)
     // Enable interrupts on this processor.
     sti();
 
+    struct proc *next_proc = null; //TODOC
     // Loop over process table looking for process to run.
     acquire(&ptable.lock);
     for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
       if(p->state != RUNNABLE)
         continue;
+      switch(sched_type){
+        case(priority_scheduling):
+            //@@ Task 4.2
+            next_proc = p; // Initialize with the first runnable process found.
+            for(temp_p = ptable.proc; temp_p < &ptable.proc[NPROC]; temp_p++){
+              if(temp_p->state != RUNNABLE)
+                continue;
+              if(next_proc->accumulator > temp_p->accumulator)
+                next_proc = temp_p;
+            }
+            p = next_proc;
+            break;
+
+        case(CFS):
+            next_proc = p; // Initialize with the first runnable process found.
+            for(temp_p = ptable.proc; temp_p < &ptable.proc[NPROC]; temp_p++){
+              if(temp_p->state != RUNNABLE)
+                continue;
+            if(get_ratio_time(next_proc) > get_ratio_time(temp_p))
+              next_proc = temp_p;
+            }
+            p = next_proc;
+            break;
+
+        default:
+          ;
+      //finsh Task 4.2
+}
+
 
       // Switch to chosen process.  It is the process's job
       // to release ptable.lock and then reacquire it
@@ -385,8 +430,12 @@ sched(void)
 void
 yield(void)
 {
+  struct proc *p = myproc();
+
   acquire(&ptable.lock);  //DOC: yieldlock
-  myproc()->state = RUNNABLE;
+  p->state = RUNNABLE;
+  // when finished running, the proces's acuumulator increases with its priority value
+  p->accumulator += p->ps_priority; 
   sched();
   release(&ptable.lock);
 }
@@ -460,8 +509,10 @@ wakeup1(void *chan)
   struct proc *p;
 
   for(p = ptable.proc; p < &ptable.proc[NPROC]; p++)
-    if(p->state == SLEEPING && p->chan == chan)
+    if(p->state == SLEEPING && p->chan == chan){
       p->state = RUNNABLE;
+      set_accumulator(p);
+    }
 }
 
 // Wake up all processes sleeping on chan.
@@ -532,3 +583,70 @@ procdump(void)
     cprintf("\n");
   }
 }
+
+//@@ Set the accumulator for a new and blocked processes.
+void
+set_accumulator(struct proc* myproc){
+    long long min_accumulator = 0; // The accumulator is 0 in case there are no other processes
+    struct proc *p;
+    for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+       if(p->state == RUNNING || p->state == RUNNABLE){
+        min_accumulator = p->accumulator;
+        break;
+       }
+    }
+
+    for(p = ptable.proc; p < &ptable.proc[NPROC] && min_accumulator > 0; p++){
+       if((p->state == RUNNING || p->state == RUNNABLE) && min_accumulator > p->accumulator ){
+         min_accumulator = p->accumulator;
+       }
+    }
+    myproc->accumulator = min_accumulator;
+}
+
+//@@ Set the accumulator for a new and blocked processes.
+void
+update_proc_times(){
+  struct proc *p;
+  acquire(&ptable.lock);
+  for(p = ptable.proc; p < &ptable.proc[NPROC]; p++){
+    switch(p->state){
+      case SLEEPING:
+        p->stime++;
+        break;
+
+      case RUNNABLE:
+        p->retime++;
+        break;
+
+      case RUNNING:
+        p->rtime++;
+        break;
+
+      default:
+      break;
+    }
+  }
+  release(&ptable.lock);
+}
+
+//@@ Returns the Rtime for a process. ratio_time = (rtime*d_factor)/(rtime+wtime) (wtime = retime+stime)  
+float
+get_ratio_time(struct proc* p){
+  int wtime = p->retime+p->stime;
+  float d_factor = 1 ;
+  switch(p->cfs_priority) {
+    case 1:
+      d_factor = 0.75;
+      break;
+    case 2:
+      d_factor = 1;
+      break;
+    case 3:
+      d_factor = 1.25;
+      break;
+    default:
+      break;
+  }
+  return (p->rtime*d_factor)/(p->rtime+wtime);
+} 
diff --git a/proc.h b/proc.h
index 1647114..aef6d43 100644
--- a/proc.h
+++ b/proc.h
@@ -34,6 +34,7 @@ struct context {
 
 enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };
 
+
 // Per-process state
 struct proc {
   uint sz;                     // Size of process memory (bytes)
@@ -49,6 +50,17 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+ 
+  //@@Task 3
+  int status;                  // Process status for wait and exit
+  //@@Task 4.2
+  long long accumulator;        //Process accumulator for scheduling
+  int ps_priority;             //Process priority for scheduling   
+  //@@Task 4.3
+  int rtime;                   //Time process was in running state
+  int stime;                   //Time process was in sleeping state
+  int retime;                  //Time process was in ready/runnable state
+  int cfs_priority;            //Process cfs priority for scheduling
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/rm.c b/rm.c
index 4fd33c8..1e6daec 100644
--- a/rm.c
+++ b/rm.c
@@ -9,7 +9,7 @@ main(int argc, char *argv[])
 
   if(argc < 2){
     printf(2, "Usage: rm files...\n");
-    exit();
+    exit(1);
   }
 
   for(i = 1; i < argc; i++){
@@ -19,5 +19,5 @@ main(int argc, char *argv[])
     }
   }
 
-  exit();
+  exit(0);
 }
diff --git a/sanity.c b/sanity.c
new file mode 100644
index 0000000..8dac52a
--- /dev/null
+++ b/sanity.c
@@ -0,0 +1,63 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+void dummy_loop(){
+  for (double z = 0; z < 10000.0; z+= 0.1){
+    double x =  x + 3.14 * 89.64;   // useless calculations to consume CPU time
+  }
+}
+
+int
+main(int argc, char **argv)
+{
+  if (argc > 1){
+    printf(1,"Usage: sanity to many arguments\n");
+    exit(1);
+  }
+
+  int i, pid;
+  struct perf * perf_arr[3];
+  for(i=0; i<3; i++){
+    perf_arr[i] = (struct  perf*)malloc(sizeof(struct perf));
+  }
+
+  //struct perf * performance = (struct  perf*)malloc(sizeof(struct perf));
+  int status;
+  printf(1,"PID   PS_PRIORITY     STIME     RETIME     RTIME\n");
+
+  for (i=0; i<3; i++){
+    pid = fork();
+
+    if (pid > 0){ //child
+      if(pid%3 == 0)
+        set_ps_priority(1);
+        else if(pid%3 == 1)
+          set_ps_priority(5);
+           else
+            set_ps_priority(10);
+
+      set_cfs_priority(3);
+      dummy_loop();
+      proc_info(perf_arr[i]);
+      printf(1,"%d\t%d\t\t%d\t%d\t\t%d\n",pid,
+                                                              perf_arr[i]->ps_priority,
+                                                              perf_arr[i]->stime,
+                                                              perf_arr[i]->retime,
+                                                              perf_arr[i]->rtime);
+      wait(&status);
+      exit(0);
+    }
+    else{ //parent
+      wait(&status);
+    }
+  }
+  for(i=0; i<3; i++){
+    free(perf_arr[i]);
+  }
+  free(perf_arr);
+  exit(0);
+}
+
+
+
diff --git a/sh.c b/sh.c
index 054bab9..938e9fd 100644
--- a/sh.c
+++ b/sh.c
@@ -58,6 +58,7 @@ void
 runcmd(struct cmd *cmd)
 {
   int p[2];
+  int status;
   struct backcmd *bcmd;
   struct execcmd *ecmd;
   struct listcmd *lcmd;
@@ -65,7 +66,7 @@ runcmd(struct cmd *cmd)
   struct redircmd *rcmd;
 
   if(cmd == 0)
-    exit();
+    exit(0);
 
   switch(cmd->type){
   default:
@@ -74,7 +75,7 @@ runcmd(struct cmd *cmd)
   case EXEC:
     ecmd = (struct execcmd*)cmd;
     if(ecmd->argv[0] == 0)
-      exit();
+      exit(0);
     exec(ecmd->argv[0], ecmd->argv);
     printf(2, "exec %s failed\n", ecmd->argv[0]);
     break;
@@ -84,7 +85,7 @@ runcmd(struct cmd *cmd)
     close(rcmd->fd);
     if(open(rcmd->file, rcmd->mode) < 0){
       printf(2, "open %s failed\n", rcmd->file);
-      exit();
+      exit(1);
     }
     runcmd(rcmd->cmd);
     break;
@@ -93,7 +94,7 @@ runcmd(struct cmd *cmd)
     lcmd = (struct listcmd*)cmd;
     if(fork1() == 0)
       runcmd(lcmd->left);
-    wait();
+    wait(&status);
     runcmd(lcmd->right);
     break;
 
@@ -117,8 +118,8 @@ runcmd(struct cmd *cmd)
     }
     close(p[0]);
     close(p[1]);
-    wait();
-    wait();
+    wait(&status);
+    wait(&status);
     break;
 
   case BACK:
@@ -127,7 +128,7 @@ runcmd(struct cmd *cmd)
       runcmd(bcmd->cmd);
     break;
   }
-  exit();
+  exit(0);
 }
 
 int
@@ -146,6 +147,7 @@ main(void)
 {
   static char buf[100];
   int fd;
+  int status;
 
   // Ensure that three file descriptors are open.
   while((fd = open("console", O_RDWR)) >= 0){
@@ -166,16 +168,16 @@ main(void)
     }
     if(fork1() == 0)
       runcmd(parsecmd(buf));
-    wait();
+    wait(&status);
   }
-  exit();
+  exit(0);
 }
 
 void
 panic(char *s)
 {
   printf(2, "%s\n", s);
-  exit();
+  exit(0);
 }
 
 int
diff --git a/stressfs.c b/stressfs.c
index c0a4743..c0c7519 100644
--- a/stressfs.c
+++ b/stressfs.c
@@ -17,6 +17,7 @@ int
 main(int argc, char *argv[])
 {
   int fd, i;
+  int status;
   char path[] = "stressfs0";
   char data[512];
 
@@ -43,7 +44,7 @@ main(int argc, char *argv[])
     read(fd, data, sizeof(data));
   close(fd);
 
-  wait();
+  wait(&status);
 
-  exit();
+  exit(0);
 }
diff --git a/syscall.c b/syscall.c
index ee85261..4e1370c 100644
--- a/syscall.c
+++ b/syscall.c
@@ -78,10 +78,11 @@ argstr(int n, char **pp)
 {
   int addr;
   if(argint(n, &addr) < 0)
-    return -1;
+    return -1;  
   return fetchstr(addr, pp);
 }
 
+
 extern int sys_chdir(void);
 extern int sys_close(void);
 extern int sys_dup(void);
@@ -103,6 +104,13 @@ extern int sys_unlink(void);
 extern int sys_wait(void);
 extern int sys_write(void);
 extern int sys_uptime(void);
+//@@ kernel system Calls
+extern int sys_memsize(void);
+extern int sys_set_ps_priority(void);
+extern int sys_set_cfs_priority(void);
+extern int sys_policy(void);
+extern int sys_proc_info(void);
+//@@ End kernel system Calls
 
 static int (*syscalls[])(void) = {
 [SYS_fork]    sys_fork,
@@ -126,6 +134,11 @@ static int (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_memsize] sys_memsize,
+[SYS_set_ps_priority] sys_set_ps_priority,
+[SYS_set_cfs_priority] sys_set_cfs_priority,
+[SYS_policy] sys_policy,
+[SYS_proc_info] sys_proc_info,
 };
 
 void
diff --git a/syscall.h b/syscall.h
index bc5f356..d756119 100644
--- a/syscall.h
+++ b/syscall.h
@@ -20,3 +20,10 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+//@@ System Calls #
+#define SYS_memsize 22
+#define SYS_set_ps_priority 23 
+#define SYS_set_cfs_priority 24 
+#define SYS_policy 25
+#define SYS_proc_info 26
+//@@ End System Calls #
\ No newline at end of file
diff --git a/sysproc.c b/sysproc.c
index 0686d29..fd82035 100644
--- a/sysproc.c
+++ b/sysproc.c
@@ -16,14 +16,22 @@ sys_fork(void)
 int
 sys_exit(void)
 {
-  exit();
+    int status;
+
+  if(argint(0, &status) < 0)
+    return -1;
+  exit(status);
   return 0;  // not reached
 }
 
 int
 sys_wait(void)
 {
-  return wait();
+  char *status;
+ 
+  if(argptr(0, &status,4) < 0)
+    return -1;
+  return wait((int*)status);
 }
 
 int
@@ -42,6 +50,73 @@ sys_getpid(void)
   return myproc()->pid;
 }
 
+//@@ System Call Definition
+int
+sys_memsize(void)
+{
+  return myproc()->sz;
+}
+
+int
+sys_set_ps_priority(void)
+{
+  int priority;
+  
+  if(argint(0, &priority) < 0)
+    return -1;
+
+  if (priority < 1 || priority > 10)
+    return -1;
+
+  myproc()->ps_priority = priority;
+  return 0;
+
+}
+
+int
+sys_set_cfs_priority(void)
+{
+  int priority;
+
+  if (argint(0, &priority) < 0)
+    return -1;
+
+  if (priority < 1 || priority > 3)
+    return -1;
+  myproc()->cfs_priority = priority;
+  return 0;
+}
+
+int
+sys_policy(void)
+{
+  int policy;
+
+  if (argint(0, &policy) < 0)
+    return -1;
+
+  if (policy < 0 || policy > 2)
+    return -1;
+  sched_type = policy;
+  return 0;
+}
+
+int
+sys_proc_info(void)
+{
+  char * performance;
+
+  if(argptr(0, &performance,sizeof(performance)) < 0)
+    return -1;
+
+  ((struct perf*)performance)->ps_priority = myproc()->ps_priority;
+  ((struct perf*)performance)->stime = myproc()->stime;
+  ((struct perf*)performance)->retime = myproc()->retime;
+  ((struct perf*)performance)->rtime = myproc()->rtime;
+  return 0;
+}
+//@@ End System Call Definition
+
 int
 sys_sbrk(void)
 {
diff --git a/trap.c b/trap.c
index 41c66eb..31fb29c 100644
--- a/trap.c
+++ b/trap.c
@@ -38,11 +38,11 @@ trap(struct trapframe *tf)
 {
   if(tf->trapno == T_SYSCALL){
     if(myproc()->killed)
-      exit();
+      exit(0);
     myproc()->tf = tf;
     syscall();
     if(myproc()->killed)
-      exit();
+      exit(0);
     return;
   }
 
@@ -51,6 +51,7 @@ trap(struct trapframe *tf)
     if(cpuid() == 0){
       acquire(&tickslock);
       ticks++;
+      update_proc_times();
       wakeup(&ticks);
       release(&tickslock);
     }
@@ -98,7 +99,7 @@ trap(struct trapframe *tf)
   // (If it is still executing in the kernel, let it keep running
   // until it gets to the regular system call return.)
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-    exit();
+    exit(0);
 
   // Force process to give up CPU on clock tick.
   // If interrupts were on while locks held, would need to check nlock.
@@ -108,5 +109,5 @@ trap(struct trapframe *tf)
 
   // Check if the process has been killed since we yielded
   if(myproc() && myproc()->killed && (tf->cs&3) == DPL_USER)
-    exit();
+    exit(0);
 }
diff --git a/types.h b/types.h
index e4adf64..a2c269f 100644
--- a/types.h
+++ b/types.h
@@ -2,3 +2,12 @@ typedef unsigned int   uint;
 typedef unsigned short ushort;
 typedef unsigned char  uchar;
 typedef uint pde_t;
+#define null (void*)0
+
+struct perf { 
+  int ps_priority;
+  int stime;
+  int retime;
+  int rtime;
+};
+
diff --git a/user.h b/user.h
index 4f99c52..0d8d4bd 100644
--- a/user.h
+++ b/user.h
@@ -2,9 +2,17 @@ struct stat;
 struct rtcdate;
 
 // system calls
+//@@ System calls for the user
+int memsize(void);
+int set_ps_priority(int);
+int set_cfs_priority(int);
+int policy(int);
+int proc_info(struct perf*);
+//@@ End System calls for the user
+
 int fork(void);
-int exit(void) __attribute__((noreturn));
-int wait(void);
+int exit(int) __attribute__((noreturn));
+int wait(int*);
 int pipe(int*);
 int write(int, const void*, int);
 int read(int, void*, int);
diff --git a/usertests.c b/usertests.c
index a1e97e7..cbee1cf 100644
--- a/usertests.c
+++ b/usertests.c
@@ -21,52 +21,53 @@ iputtest(void)
 
   if(mkdir("iputdir") < 0){
     printf(stdout, "mkdir failed\n");
-    exit();
+    exit(1);
   }
   if(chdir("iputdir") < 0){
     printf(stdout, "chdir iputdir failed\n");
-    exit();
+    exit(1);
   }
   if(unlink("../iputdir") < 0){
     printf(stdout, "unlink ../iputdir failed\n");
-    exit();
+    exit(1);
   }
   if(chdir("/") < 0){
     printf(stdout, "chdir / failed\n");
-    exit();
+    exit(1);
   }
   printf(stdout, "iput test ok\n");
 }
 
-// does exit() call iput(p->cwd) in a transaction?
+// does exit(1) call iput(p->cwd) in a transaction?
 void
 exitiputtest(void)
 {
   int pid;
+  int status;
 
   printf(stdout, "exitiput test\n");
 
   pid = fork();
   if(pid < 0){
     printf(stdout, "fork failed\n");
-    exit();
+    exit(1);
   }
   if(pid == 0){
     if(mkdir("iputdir") < 0){
       printf(stdout, "mkdir failed\n");
-      exit();
+      exit(1);
     }
     if(chdir("iputdir") < 0){
       printf(stdout, "child chdir failed\n");
-      exit();
+      exit(1);
     }
     if(unlink("../iputdir") < 0){
       printf(stdout, "unlink ../iputdir failed\n");
-      exit();
+      exit(1);
     }
-    exit();
+    exit(0);
   }
-  wait();
+  wait(&status);
   printf(stdout, "exitiput test ok\n");
 }
 
@@ -85,31 +86,32 @@ void
 openiputtest(void)
 {
   int pid;
+  int status;
 
   printf(stdout, "openiput test\n");
   if(mkdir("oidir") < 0){
     printf(stdout, "mkdir oidir failed\n");
-    exit();
+    exit(1);
   }
   pid = fork();
   if(pid < 0){
     printf(stdout, "fork failed\n");
-    exit();
+    exit(1);
   }
   if(pid == 0){
     int fd = open("oidir", O_RDWR);
     if(fd >= 0){
       printf(stdout, "open directory for write succeeded\n");
-      exit();
+      exit(0);
     }
-    exit();
+    exit(0);
   }
   sleep(1);
   if(unlink("oidir") != 0){
     printf(stdout, "unlink failed\n");
-    exit();
+    exit(1);
   }
-  wait();
+  wait(&status);
   printf(stdout, "openiput test ok\n");
 }
 
@@ -124,13 +126,13 @@ opentest(void)
   fd = open("echo", 0);
   if(fd < 0){
     printf(stdout, "open echo failed!\n");
-    exit();
+    exit(1);
   }
   close(fd);
   fd = open("doesnotexist", 0);
   if(fd >= 0){
     printf(stdout, "open doesnotexist succeeded!\n");
-    exit();
+    exit(0);
   }
   printf(stdout, "open test ok\n");
 }
@@ -147,16 +149,16 @@ writetest(void)
     printf(stdout, "creat small succeeded; ok\n");
   } else {
     printf(stdout, "error: creat small failed!\n");
-    exit();
+    exit(1);
   }
   for(i = 0; i < 100; i++){
     if(write(fd, "aaaaaaaaaa", 10) != 10){
       printf(stdout, "error: write aa %d new file failed\n", i);
-      exit();
+      exit(1);
     }
     if(write(fd, "bbbbbbbbbb", 10) != 10){
       printf(stdout, "error: write bb %d new file failed\n", i);
-      exit();
+      exit(1);
     }
   }
   printf(stdout, "writes ok\n");
@@ -166,20 +168,20 @@ writetest(void)
     printf(stdout, "open small succeeded ok\n");
   } else {
     printf(stdout, "error: open small failed!\n");
-    exit();
+    exit(1);
   }
   i = read(fd, buf, 2000);
   if(i == 2000){
     printf(stdout, "read succeeded ok\n");
   } else {
     printf(stdout, "read failed\n");
-    exit();
+    exit(1);
   }
   close(fd);
 
   if(unlink("small") < 0){
     printf(stdout, "unlink small failed\n");
-    exit();
+    exit(1);
   }
   printf(stdout, "small file test ok\n");
 }
@@ -194,14 +196,14 @@ writetest1(void)
   fd = open("big", O_CREATE|O_RDWR);
   if(fd < 0){
     printf(stdout, "error: creat big failed!\n");
-    exit();
+    exit(1);
   }
 
   for(i = 0; i < MAXFILE; i++){
     ((int*)buf)[0] = i;
     if(write(fd, buf, 512) != 512){
       printf(stdout, "error: write big file failed\n", i);
-      exit();
+      exit(1);
     }
   }
 
@@ -210,7 +212,7 @@ writetest1(void)
   fd = open("big", O_RDONLY);
   if(fd < 0){
     printf(stdout, "error: open big failed!\n");
-    exit();
+    exit(1);
   }
 
   n = 0;
@@ -219,24 +221,24 @@ writetest1(void)
     if(i == 0){
       if(n == MAXFILE - 1){
         printf(stdout, "read only %d blocks from big", n);
-        exit();
+        exit(1);
       }
       break;
     } else if(i != 512){
       printf(stdout, "read failed %d\n", i);
-      exit();
+      exit(1);
     }
     if(((int*)buf)[0] != n){
       printf(stdout, "read content of block %d is %d\n",
              n, ((int*)buf)[0]);
-      exit();
+      exit(0);
     }
     n++;
   }
   close(fd);
   if(unlink("big") < 0){
     printf(stdout, "unlink big failed\n");
-    exit();
+    exit(1);
   }
   printf(stdout, "big files ok\n");
 }
@@ -270,22 +272,22 @@ void dirtest(void)
 
   if(mkdir("dir0") < 0){
     printf(stdout, "mkdir failed\n");
-    exit();
+    exit(1);
   }
 
   if(chdir("dir0") < 0){
     printf(stdout, "chdir dir0 failed\n");
-    exit();
+    exit(1);
   }
 
   if(chdir("..") < 0){
     printf(stdout, "chdir .. failed\n");
-    exit();
+    exit(1);
   }
 
   if(unlink("dir0") < 0){
     printf(stdout, "unlink dir0 failed\n");
-    exit();
+    exit(1);
   }
   printf(stdout, "mkdir test ok\n");
 }
@@ -296,7 +298,7 @@ exectest(void)
   printf(stdout, "exec test\n");
   if(exec("echo", echoargv) < 0){
     printf(stdout, "exec echo failed\n");
-    exit();
+    exit(1);
   }
 }
 
@@ -307,10 +309,11 @@ pipe1(void)
 {
   int fds[2], pid;
   int seq, i, n, cc, total;
+  int status;
 
   if(pipe(fds) != 0){
     printf(1, "pipe() failed\n");
-    exit();
+    exit(1);
   }
   pid = fork();
   seq = 0;
@@ -321,10 +324,10 @@ pipe1(void)
         buf[i] = seq++;
       if(write(fds[1], buf, 1033) != 1033){
         printf(1, "pipe1 oops 1\n");
-        exit();
+        exit(0);
       }
     }
-    exit();
+    exit(0);
   } else if(pid > 0){
     close(fds[1]);
     total = 0;
@@ -343,13 +346,13 @@ pipe1(void)
     }
     if(total != 5 * 1033){
       printf(1, "pipe1 oops 3 total %d\n", total);
-      exit();
+      exit(0);
     }
     close(fds[0]);
-    wait();
+    wait(&status);
   } else {
     printf(1, "fork() failed\n");
-    exit();
+    exit(1);
   }
   printf(1, "pipe1 ok\n");
 }
@@ -359,6 +362,7 @@ void
 preempt(void)
 {
   int pid1, pid2, pid3;
+  int status1, status2, status3;
   int pfds[2];
 
   printf(1, "preempt: ");
@@ -394,9 +398,9 @@ preempt(void)
   kill(pid2);
   kill(pid3);
   printf(1, "wait... ");
-  wait();
-  wait();
-  wait();
+  wait(&status1);
+  wait(&status2);
+  wait(&status3);
   printf(1, "preempt ok\n");
 }
 
@@ -405,6 +409,7 @@ void
 exitwait(void)
 {
   int i, pid;
+  int status;
 
   for(i = 0; i < 100; i++){
     pid = fork();
@@ -413,12 +418,12 @@ exitwait(void)
       return;
     }
     if(pid){
-      if(wait() != pid){
+      if(wait(&status) != pid){
         printf(1, "wait wrong pid\n");
         return;
       }
     } else {
-      exit();
+      exit(0);
     }
   }
   printf(1, "exitwait ok\n");
@@ -429,6 +434,7 @@ mem(void)
 {
   void *m1, *m2;
   int pid, ppid;
+  int status;
 
   printf(1, "mem test\n");
   ppid = getpid();
@@ -447,13 +453,13 @@ mem(void)
     if(m1 == 0){
       printf(1, "couldn't allocate mem?!!\n");
       kill(ppid);
-      exit();
+      exit(1);
     }
     free(m1);
     printf(1, "mem ok\n");
-    exit();
+    exit(0);
   } else {
-    wait();
+    wait(&status);
   }
 }
 
@@ -465,6 +471,7 @@ void
 sharedfd(void)
 {
   int fd, pid, i, n, nc, np;
+  int status;
   char buf[10];
 
   printf(1, "sharedfd test\n");
@@ -484,9 +491,9 @@ sharedfd(void)
     }
   }
   if(pid == 0)
-    exit();
+    exit(0);
   else
-    wait();
+    wait(&status);
   close(fd);
   fd = open("sharedfd", 0);
   if(fd < 0){
@@ -508,7 +515,7 @@ sharedfd(void)
     printf(1, "sharedfd ok\n");
   } else {
     printf(1, "sharedfd oops %d %d\n", nc, np);
-    exit();
+    exit(1);
   }
 }
 
@@ -518,6 +525,7 @@ void
 fourfiles(void)
 {
   int fd, pid, i, j, n, total, pi;
+  int status;
   char *names[] = { "f0", "f1", "f2", "f3" };
   char *fname;
 
@@ -530,29 +538,29 @@ fourfiles(void)
     pid = fork();
     if(pid < 0){
       printf(1, "fork failed\n");
-      exit();
+      exit(1);
     }
 
     if(pid == 0){
       fd = open(fname, O_CREATE | O_RDWR);
       if(fd < 0){
         printf(1, "create failed\n");
-        exit();
+        exit(1);
       }
 
       memset(buf, '0'+pi, 512);
       for(i = 0; i < 12; i++){
         if((n = write(fd, buf, 500)) != 500){
           printf(1, "write failed %d\n", n);
-          exit();
+          exit(1);
         }
       }
-      exit();
+      exit(0);
     }
   }
 
   for(pi = 0; pi < 4; pi++){
-    wait();
+    wait(&status);
   }
 
   for(i = 0; i < 2; i++){
@@ -563,7 +571,7 @@ fourfiles(void)
       for(j = 0; j < n; j++){
         if(buf[j] != '0'+i){
           printf(1, "wrong char\n");
-          exit();
+          exit(1);
         }
       }
       total += n;
@@ -571,7 +579,7 @@ fourfiles(void)
     close(fd);
     if(total != 12*500){
       printf(1, "wrong length %d\n", total);
-      exit();
+      exit(1);
     }
     unlink(fname);
   }
@@ -585,6 +593,7 @@ createdelete(void)
 {
   enum { N = 20 };
   int pid, i, fd, pi;
+  int status;
   char name[32];
 
   printf(1, "createdelete test\n");
@@ -593,7 +602,7 @@ createdelete(void)
     pid = fork();
     if(pid < 0){
       printf(1, "fork failed\n");
-      exit();
+      exit(1);
     }
 
     if(pid == 0){
@@ -604,23 +613,23 @@ createdelete(void)
         fd = open(name, O_CREATE | O_RDWR);
         if(fd < 0){
           printf(1, "create failed\n");
-          exit();
+          exit(1);
         }
         close(fd);
         if(i > 0 && (i % 2 ) == 0){
           name[1] = '0' + (i / 2);
           if(unlink(name) < 0){
             printf(1, "unlink failed\n");
-            exit();
+            exit(1);
           }
         }
       }
-      exit();
+      exit(0);
     }
   }
 
   for(pi = 0; pi < 4; pi++){
-    wait();
+    wait(&status);
   }
 
   name[0] = name[1] = name[2] = 0;
@@ -631,10 +640,10 @@ createdelete(void)
       fd = open(name, 0);
       if((i == 0 || i >= N/2) && fd < 0){
         printf(1, "oops createdelete %s didn't exist\n", name);
-        exit();
+        exit(1);
       } else if((i >= 1 && i < N/2) && fd >= 0){
         printf(1, "oops createdelete %s did exist\n", name);
-        exit();
+        exit(1);
       }
       if(fd >= 0)
         close(fd);
@@ -662,7 +671,7 @@ unlinkread(void)
   fd = open("unlinkread", O_CREATE | O_RDWR);
   if(fd < 0){
     printf(1, "create unlinkread failed\n");
-    exit();
+    exit(1);
   }
   write(fd, "hello", 5);
   close(fd);
@@ -670,11 +679,11 @@ unlinkread(void)
   fd = open("unlinkread", O_RDWR);
   if(fd < 0){
     printf(1, "open unlinkread failed\n");
-    exit();
+    exit(1);
   }
   if(unlink("unlinkread") != 0){
     printf(1, "unlink unlinkread failed\n");
-    exit();
+    exit(1);
   }
 
   fd1 = open("unlinkread", O_CREATE | O_RDWR);
@@ -683,15 +692,15 @@ unlinkread(void)
 
   if(read(fd, buf, sizeof(buf)) != 5){
     printf(1, "unlinkread read failed");
-    exit();
+    exit(1);
   }
   if(buf[0] != 'h'){
     printf(1, "unlinkread wrong data\n");
-    exit();
+    exit(1);
   }
   if(write(fd, buf, 10) != 10){
     printf(1, "unlinkread write failed\n");
-    exit();
+    exit(1);
   }
   close(fd);
   unlink("unlinkread");
@@ -711,50 +720,50 @@ linktest(void)
   fd = open("lf1", O_CREATE|O_RDWR);
   if(fd < 0){
     printf(1, "create lf1 failed\n");
-    exit();
+    exit(1);
   }
   if(write(fd, "hello", 5) != 5){
     printf(1, "write lf1 failed\n");
-    exit();
+    exit(1);
   }
   close(fd);
 
   if(link("lf1", "lf2") < 0){
     printf(1, "link lf1 lf2 failed\n");
-    exit();
+    exit(1);
   }
   unlink("lf1");
 
   if(open("lf1", 0) >= 0){
     printf(1, "unlinked lf1 but it is still there!\n");
-    exit();
+    exit(0);
   }
 
   fd = open("lf2", 0);
   if(fd < 0){
     printf(1, "open lf2 failed\n");
-    exit();
+    exit(1);
   }
   if(read(fd, buf, sizeof(buf)) != 5){
     printf(1, "read lf2 failed\n");
-    exit();
+    exit(1);
   }
   close(fd);
 
   if(link("lf2", "lf2") >= 0){
     printf(1, "link lf2 lf2 succeeded! oops\n");
-    exit();
+    exit(0);
   }
 
   unlink("lf2");
   if(link("lf2", "lf1") >= 0){
     printf(1, "link non-existant succeeded! oops\n");
-    exit();
+    exit(0);
   }
 
   if(link(".", "lf1") >= 0){
     printf(1, "link . lf1 succeeded! oops\n");
-    exit();
+    exit(0);
   }
 
   printf(1, "linktest ok\n");
@@ -766,6 +775,7 @@ concreate(void)
 {
   char file[3];
   int i, pid, n, fd;
+  int status;
   char fa[40];
   struct {
     ushort inum;
@@ -787,14 +797,14 @@ concreate(void)
       fd = open(file, O_CREATE | O_RDWR);
       if(fd < 0){
         printf(1, "concreate create %s failed\n", file);
-        exit();
+        exit(1);
       }
       close(fd);
     }
     if(pid == 0)
-      exit();
+      exit(0);
     else
-      wait();
+      wait(&status);
   }
 
   memset(fa, 0, sizeof(fa));
@@ -807,11 +817,11 @@ concreate(void)
       i = de.name[1] - '0';
       if(i < 0 || i >= sizeof(fa)){
         printf(1, "concreate weird file %s\n", de.name);
-        exit();
+        exit(0);
       }
       if(fa[i]){
         printf(1, "concreate duplicate file %s\n", de.name);
-        exit();
+        exit(0);
       }
       fa[i] = 1;
       n++;
@@ -821,7 +831,7 @@ concreate(void)
 
   if(n != 40){
     printf(1, "concreate not enough files in directory listing\n");
-    exit();
+    exit(0);
   }
 
   for(i = 0; i < 40; i++){
@@ -829,7 +839,7 @@ concreate(void)
     pid = fork();
     if(pid < 0){
       printf(1, "fork failed\n");
-      exit();
+      exit(1);
     }
     if(((i % 3) == 0 && pid == 0) ||
        ((i % 3) == 1 && pid != 0)){
@@ -844,9 +854,9 @@ concreate(void)
       unlink(file);
     }
     if(pid == 0)
-      exit();
+      exit(0);
     else
-      wait();
+      wait(&status);
   }
 
   printf(1, "concreate ok\n");
@@ -858,14 +868,14 @@ void
 linkunlink()
 {
   int pid, i;
-
+  int status;
   printf(1, "linkunlink test\n");
 
   unlink("x");
   pid = fork();
   if(pid < 0){
     printf(1, "fork failed\n");
-    exit();
+    exit(1);
   }
 
   unsigned int x = (pid ? 1 : 97);
@@ -881,9 +891,9 @@ linkunlink()
   }
 
   if(pid)
-    wait();
+    wait(&status);
   else
-    exit();
+    exit(0);
 
   printf(1, "linkunlink ok\n");
 }
@@ -901,7 +911,7 @@ bigdir(void)
   fd = open("bd", O_CREATE);
   if(fd < 0){
     printf(1, "bigdir create failed\n");
-    exit();
+    exit(1);
   }
   close(fd);
 
@@ -912,7 +922,7 @@ bigdir(void)
     name[3] = '\0';
     if(link("bd", name) != 0){
       printf(1, "bigdir link failed\n");
-      exit();
+      exit(1);
     }
   }
 
@@ -924,7 +934,7 @@ bigdir(void)
     name[3] = '\0';
     if(unlink(name) != 0){
       printf(1, "bigdir unlink failed");
-      exit();
+      exit(1);
     }
   }
 
@@ -941,31 +951,31 @@ subdir(void)
   unlink("ff");
   if(mkdir("dd") != 0){
     printf(1, "subdir mkdir dd failed\n");
-    exit();
+    exit(1);
   }
 
   fd = open("dd/ff", O_CREATE | O_RDWR);
   if(fd < 0){
     printf(1, "create dd/ff failed\n");
-    exit();
+    exit(1);
   }
   write(fd, "ff", 2);
   close(fd);
 
   if(unlink("dd") >= 0){
     printf(1, "unlink dd (non-empty dir) succeeded!\n");
-    exit();
+    exit(0);
   }
 
   if(mkdir("/dd/dd") != 0){
     printf(1, "subdir mkdir dd/dd failed\n");
-    exit();
+    exit(1);
   }
 
   fd = open("dd/dd/ff", O_CREATE | O_RDWR);
   if(fd < 0){
     printf(1, "create dd/dd/ff failed\n");
-    exit();
+    exit(1);
   }
   write(fd, "FF", 2);
   close(fd);
@@ -973,142 +983,142 @@ subdir(void)
   fd = open("dd/dd/../ff", 0);
   if(fd < 0){
     printf(1, "open dd/dd/../ff failed\n");
-    exit();
+    exit(1);
   }
   cc = read(fd, buf, sizeof(buf));
   if(cc != 2 || buf[0] != 'f'){
     printf(1, "dd/dd/../ff wrong content\n");
-    exit();
+    exit(1);
   }
   close(fd);
 
   if(link("dd/dd/ff", "dd/dd/ffff") != 0){
     printf(1, "link dd/dd/ff dd/dd/ffff failed\n");
-    exit();
+    exit(1);
   }
 
   if(unlink("dd/dd/ff") != 0){
     printf(1, "unlink dd/dd/ff failed\n");
-    exit();
+    exit(1);
   }
   if(open("dd/dd/ff", O_RDONLY) >= 0){
     printf(1, "open (unlinked) dd/dd/ff succeeded\n");
-    exit();
+    exit(0);
   }
 
   if(chdir("dd") != 0){
     printf(1, "chdir dd failed\n");
-    exit();
+    exit(1);
   }
   if(chdir("dd/../../dd") != 0){
     printf(1, "chdir dd/../../dd failed\n");
-    exit();
+    exit(1);
   }
   if(chdir("dd/../../../dd") != 0){
     printf(1, "chdir dd/../../dd failed\n");
-    exit();
+    exit(1);
   }
   if(chdir("./..") != 0){
     printf(1, "chdir ./.. failed\n");
-    exit();
+    exit(1);
   }
 
   fd = open("dd/dd/ffff", 0);
   if(fd < 0){
     printf(1, "open dd/dd/ffff failed\n");
-    exit();
+    exit(1);
   }
   if(read(fd, buf, sizeof(buf)) != 2){
     printf(1, "read dd/dd/ffff wrong len\n");
-    exit();
+    exit(1);
   }
   close(fd);
 
   if(open("dd/dd/ff", O_RDONLY) >= 0){
     printf(1, "open (unlinked) dd/dd/ff succeeded!\n");
-    exit();
+    exit(0);
   }
 
   if(open("dd/ff/ff", O_CREATE|O_RDWR) >= 0){
     printf(1, "create dd/ff/ff succeeded!\n");
-    exit();
+    exit(0);
   }
   if(open("dd/xx/ff", O_CREATE|O_RDWR) >= 0){
     printf(1, "create dd/xx/ff succeeded!\n");
-    exit();
+    exit(0);
   }
   if(open("dd", O_CREATE) >= 0){
     printf(1, "create dd succeeded!\n");
-    exit();
+    exit(0);
   }
   if(open("dd", O_RDWR) >= 0){
     printf(1, "open dd rdwr succeeded!\n");
-    exit();
+    exit(0);
   }
   if(open("dd", O_WRONLY) >= 0){
     printf(1, "open dd wronly succeeded!\n");
-    exit();
+    exit(0);
   }
   if(link("dd/ff/ff", "dd/dd/xx") == 0){
     printf(1, "link dd/ff/ff dd/dd/xx succeeded!\n");
-    exit();
+    exit(0);
   }
   if(link("dd/xx/ff", "dd/dd/xx") == 0){
     printf(1, "link dd/xx/ff dd/dd/xx succeeded!\n");
-    exit();
+    exit(0);
   }
   if(link("dd/ff", "dd/dd/ffff") == 0){
     printf(1, "link dd/ff dd/dd/ffff succeeded!\n");
-    exit();
+    exit(0);
   }
   if(mkdir("dd/ff/ff") == 0){
     printf(1, "mkdir dd/ff/ff succeeded!\n");
-    exit();
+    exit(0);
   }
   if(mkdir("dd/xx/ff") == 0){
     printf(1, "mkdir dd/xx/ff succeeded!\n");
-    exit();
+    exit(0);
   }
   if(mkdir("dd/dd/ffff") == 0){
     printf(1, "mkdir dd/dd/ffff succeeded!\n");
-    exit();
+    exit(0);
   }
   if(unlink("dd/xx/ff") == 0){
     printf(1, "unlink dd/xx/ff succeeded!\n");
-    exit();
+    exit(0);
   }
   if(unlink("dd/ff/ff") == 0){
     printf(1, "unlink dd/ff/ff succeeded!\n");
-    exit();
+    exit(0);
   }
   if(chdir("dd/ff") == 0){
     printf(1, "chdir dd/ff succeeded!\n");
-    exit();
+    exit(0);
   }
   if(chdir("dd/xx") == 0){
     printf(1, "chdir dd/xx succeeded!\n");
-    exit();
+    exit(0);
   }
 
   if(unlink("dd/dd/ffff") != 0){
     printf(1, "unlink dd/dd/ff failed\n");
-    exit();
+    exit(1);
   }
   if(unlink("dd/ff") != 0){
     printf(1, "unlink dd/ff failed\n");
-    exit();
+    exit(1);
   }
   if(unlink("dd") == 0){
     printf(1, "unlink non-empty dd succeeded!\n");
-    exit();
+    exit(0);
   }
   if(unlink("dd/dd") < 0){
     printf(1, "unlink dd/dd failed\n");
-    exit();
+    exit(1);
   }
   if(unlink("dd") < 0){
     printf(1, "unlink dd failed\n");
-    exit();
+    exit(1);
   }
 
   printf(1, "subdir ok\n");
@@ -1127,14 +1137,14 @@ bigwrite(void)
     fd = open("bigwrite", O_CREATE | O_RDWR);
     if(fd < 0){
       printf(1, "cannot create bigwrite\n");
-      exit();
+      exit(1);
     }
     int i;
     for(i = 0; i < 2; i++){
       int cc = write(fd, buf, sz);
       if(cc != sz){
         printf(1, "write(%d) ret %d\n", sz, cc);
-        exit();
+        exit(0);
       }
     }
     close(fd);
@@ -1155,13 +1165,13 @@ bigfile(void)
   fd = open("bigfile", O_CREATE | O_RDWR);
   if(fd < 0){
     printf(1, "cannot create bigfile");
-    exit();
+    exit(1);
   }
   for(i = 0; i < 20; i++){
     memset(buf, i, 600);
     if(write(fd, buf, 600) != 600){
       printf(1, "write bigfile failed\n");
-      exit();
+      exit(1);
     }
   }
   close(fd);
@@ -1169,31 +1179,31 @@ bigfile(void)
   fd = open("bigfile", 0);
   if(fd < 0){
     printf(1, "cannot open bigfile\n");
-    exit();
+    exit(1);
   }
   total = 0;
   for(i = 0; ; i++){
     cc = read(fd, buf, 300);
     if(cc < 0){
       printf(1, "read bigfile failed\n");
-      exit();
+      exit(1);
     }
     if(cc == 0)
       break;
     if(cc != 300){
       printf(1, "short read bigfile\n");
-      exit();
+      exit(1);
     }
     if(buf[0] != i/2 || buf[299] != i/2){
       printf(1, "read bigfile wrong data\n");
-      exit();
+      exit(1);
     }
     total += cc;
   }
   close(fd);
   if(total != 20*600){
     printf(1, "read bigfile wrong total\n");
-    exit();
+    exit(1);
   }
   unlink("bigfile");
 
@@ -1210,32 +1220,32 @@ fourteen(void)
 
   if(mkdir("12345678901234") != 0){
     printf(1, "mkdir 12345678901234 failed\n");
-    exit();
+    exit(1);
   }
   if(mkdir("12345678901234/123456789012345") != 0){
     printf(1, "mkdir 12345678901234/123456789012345 failed\n");
-    exit();
+    exit(1);
   }
   fd = open("123456789012345/123456789012345/123456789012345", O_CREATE);
   if(fd < 0){
     printf(1, "create 123456789012345/123456789012345/123456789012345 failed\n");
-    exit();
+    exit(1);
   }
   close(fd);
   fd = open("12345678901234/12345678901234/12345678901234", 0);
   if(fd < 0){
     printf(1, "open 12345678901234/12345678901234/12345678901234 failed\n");
-    exit();
+    exit(1);
   }
   close(fd);
 
   if(mkdir("12345678901234/12345678901234") == 0){
     printf(1, "mkdir 12345678901234/12345678901234 succeeded!\n");
-    exit();
+    exit(0);
   }
   if(mkdir("123456789012345/12345678901234") == 0){
     printf(1, "mkdir 12345678901234/123456789012345 succeeded!\n");
-    exit();
+    exit(0);
   }
 
   printf(1, "fourteen ok\n");
@@ -1247,35 +1257,35 @@ rmdot(void)
   printf(1, "rmdot test\n");
   if(mkdir("dots") != 0){
     printf(1, "mkdir dots failed\n");
-    exit();
+    exit(1);
   }
   if(chdir("dots") != 0){
     printf(1, "chdir dots failed\n");
-    exit();
+    exit(1);
   }
   if(unlink(".") == 0){
     printf(1, "rm . worked!\n");
-    exit();
+    exit(0);
   }
   if(unlink("..") == 0){
     printf(1, "rm .. worked!\n");
-    exit();
+    exit(0);
   }
   if(chdir("/") != 0){
     printf(1, "chdir / failed\n");
-    exit();
+    exit(1);
   }
   if(unlink("dots/.") == 0){
     printf(1, "unlink dots/. worked!\n");
-    exit();
+    exit(0);
   }
   if(unlink("dots/..") == 0){
     printf(1, "unlink dots/.. worked!\n");
-    exit();
+    exit(0);
   }
   if(unlink("dots") != 0){
     printf(1, "unlink dots failed!\n");
-    exit();
+    exit(1);
   }
   printf(1, "rmdot ok\n");
 }
@@ -1290,49 +1300,49 @@ dirfile(void)
   fd = open("dirfile", O_CREATE);
   if(fd < 0){
     printf(1, "create dirfile failed\n");
-    exit();
+    exit(1);
   }
   close(fd);
   if(chdir("dirfile") == 0){
     printf(1, "chdir dirfile succeeded!\n");
-    exit();
+    exit(0);
   }
   fd = open("dirfile/xx", 0);
   if(fd >= 0){
     printf(1, "create dirfile/xx succeeded!\n");
-    exit();
+    exit(0);
   }
   fd = open("dirfile/xx", O_CREATE);
   if(fd >= 0){
     printf(1, "create dirfile/xx succeeded!\n");
-    exit();
+    exit(0);
   }
   if(mkdir("dirfile/xx") == 0){
     printf(1, "mkdir dirfile/xx succeeded!\n");
-    exit();
+    exit(0);
   }
   if(unlink("dirfile/xx") == 0){
     printf(1, "unlink dirfile/xx succeeded!\n");
-    exit();
+    exit(0);
   }
   if(link("README", "dirfile/xx") == 0){
     printf(1, "link to dirfile/xx succeeded!\n");
-    exit();
+    exit(0);
   }
   if(unlink("dirfile") != 0){
     printf(1, "unlink dirfile failed!\n");
-    exit();
+    exit(1);
   }
 
   fd = open(".", O_RDWR);
   if(fd >= 0){
     printf(1, "open . for writing succeeded!\n");
-    exit();
+    exit(0);
   }
   fd = open(".", 0);
   if(write(fd, "x", 1) > 0){
     printf(1, "write . succeeded!\n");
-    exit();
+    exit(0);
   }
   close(fd);
 
@@ -1351,11 +1361,11 @@ iref(void)
   for(i = 0; i < 50 + 1; i++){
     if(mkdir("irefd") != 0){
       printf(1, "mkdir irefd failed\n");
-      exit();
+      exit(1);
     }
     if(chdir("irefd") != 0){
       printf(1, "chdir irefd failed\n");
-      exit();
+      exit(1);
     }
 
     mkdir("");
@@ -1380,7 +1390,7 @@ void
 forktest(void)
 {
   int n, pid;
-
+  int status;
   printf(1, "fork test\n");
 
   for(n=0; n<1000; n++){
@@ -1388,24 +1398,24 @@ forktest(void)
     if(pid < 0)
       break;
     if(pid == 0)
-      exit();
+      exit(0);
   }
 
   if(n == 1000){
     printf(1, "fork claimed to work 1000 times!\n");
-    exit();
+    exit(1);
   }
 
   for(; n > 0; n--){
-    if(wait() < 0){
+    if(wait(&status) < 0){
       printf(1, "wait stopped early\n");
-      exit();
+      exit(1);
     }
   }
 
-  if(wait() != -1){
+  if(wait(&status) != -1){
     printf(1, "wait got too many\n");
-    exit();
+    exit(1);
   }
 
   printf(1, "fork test OK\n");
@@ -1417,6 +1427,7 @@ sbrktest(void)
   int fds[2], pid, pids[10], ppid;
   char *a, *b, *c, *lastaddr, *oldbrk, *p, scratch;
   uint amt;
+  int status;
 
   printf(stdout, "sbrk test\n");
   oldbrk = sbrk(0);
@@ -1428,7 +1439,7 @@ sbrktest(void)
     b = sbrk(1);
     if(b != a){
       printf(stdout, "sbrk test failed %d %x %x\n", i, a, b);
-      exit();
+      exit(0);
     }
     *b = 1;
     a = b + 1;
@@ -1436,17 +1447,17 @@ sbrktest(void)
   pid = fork();
   if(pid < 0){
     printf(stdout, "sbrk test fork failed\n");
-    exit();
+    exit(1);
   }
   c = sbrk(1);
   c = sbrk(1);
   if(c != a + 1){
     printf(stdout, "sbrk test failed post-fork\n");
-    exit();
+    exit(1);
   }
   if(pid == 0)
-    exit();
-  wait();
+    exit(0);
+  wait(&status);
 
   // can one grow address space to something big?
 #define BIG (100*1024*1024)
@@ -1455,7 +1466,7 @@ sbrktest(void)
   p = sbrk(amt);
   if (p != a) {
     printf(stdout, "sbrk test failed to grow big address space; enough phys mem?\n");
-    exit();
+    exit(0);
   }
   lastaddr = (char*) (BIG-1);
   *lastaddr = 99;
@@ -1465,12 +1476,12 @@ sbrktest(void)
   c = sbrk(-4096);
   if(c == (char*)0xffffffff){
     printf(stdout, "sbrk could not deallocate\n");
-    exit();
+    exit(1);
   }
   c = sbrk(0);
   if(c != a - 4096){
     printf(stdout, "sbrk deallocation produced wrong address, a %x c %x\n", a, c);
-    exit();
+    exit(0);
   }
 
   // can one re-allocate that page?
@@ -1478,19 +1489,19 @@ sbrktest(void)
   c = sbrk(4096);
   if(c != a || sbrk(0) != a + 4096){
     printf(stdout, "sbrk re-allocation failed, a %x c %x\n", a, c);
-    exit();
+    exit(1);
   }
   if(*lastaddr == 99){
     // should be zero
     printf(stdout, "sbrk de-allocation didn't really deallocate\n");
-    exit();
+    exit(1);
   }
 
   a = sbrk(0);
   c = sbrk(-(sbrk(0) - oldbrk));
   if(c != a){
     printf(stdout, "sbrk downsize failed, a %x c %x\n", a, c);
-    exit();
+    exit(1);
   }
 
   // can we read the kernel's memory?
@@ -1499,21 +1510,21 @@ sbrktest(void)
     pid = fork();
     if(pid < 0){
       printf(stdout, "fork failed\n");
-      exit();
+      exit(1);
     }
     if(pid == 0){
       printf(stdout, "oops could read %x = %x\n", a, *a);
       kill(ppid);
-      exit();
+      exit(0);
     }
-    wait();
+    wait(&status);
   }
 
   // if we run the system out of memory, does it clean up the last
   // failed allocation?
   if(pipe(fds) != 0){
     printf(1, "pipe() failed\n");
-    exit();
+    exit(1);
   }
   for(i = 0; i < sizeof(pids)/sizeof(pids[0]); i++){
     if((pids[i] = fork()) == 0){
@@ -1533,11 +1544,11 @@ sbrktest(void)
     if(pids[i] == -1)
       continue;
     kill(pids[i]);
-    wait();
+    wait(&status);
   }
   if(c == (char*)0xffffffff){
     printf(stdout, "failed sbrk leaked memory\n");
-    exit();
+    exit(1);
   }
 
   if(sbrk(0) > oldbrk)
@@ -1564,6 +1575,7 @@ validatetest(void)
 {
   int hi, pid;
   uint p;
+  int status;
 
   printf(stdout, "validate test\n");
   hi = 1100*1024;
@@ -1572,17 +1584,17 @@ validatetest(void)
     if((pid = fork()) == 0){
       // try to crash the kernel by passing in a badly placed integer
       validateint((int*)p);
-      exit();
+      exit(0);
     }
     sleep(0);
     sleep(0);
     kill(pid);
-    wait();
+    wait(&status);
 
     // try to crash the kernel by passing in a bad string pointer
     if(link("nosuchfile", (char*)p) != -1){
       printf(stdout, "link should not succeed\n");
-      exit();
+      exit(1);
     }
   }
 
@@ -1600,7 +1612,7 @@ bsstest(void)
   for(i = 0; i < sizeof(uninit); i++){
     if(uninit[i] != '\0'){
       printf(stdout, "bss test failed\n");
-      exit();
+      exit(1);
     }
   }
   printf(stdout, "bss test ok\n");
@@ -1613,7 +1625,7 @@ void
 bigargtest(void)
 {
   int pid, fd;
-
+  int status;
   unlink("bigarg-ok");
   pid = fork();
   if(pid == 0){
@@ -1627,16 +1639,16 @@ bigargtest(void)
     printf(stdout, "bigarg test ok\n");
     fd = open("bigarg-ok", O_CREATE);
     close(fd);
-    exit();
+    exit(0);
   } else if(pid < 0){
     printf(stdout, "bigargtest: fork failed\n");
-    exit();
+    exit(1);
   }
-  wait();
+  wait(&status);
   fd = open("bigarg-ok", 0);
   if(fd < 0){
     printf(stdout, "bigarg test failed!\n");
-    exit();
+    exit(1);
   }
   close(fd);
   unlink("bigarg-ok");
@@ -1704,6 +1716,7 @@ uio()
   ushort port = 0;
   uchar val = 0;
   int pid;
+  int status;
 
   printf(1, "uio test\n");
   pid = fork();
@@ -1715,12 +1728,12 @@ uio()
     port = RTC_DATA;
     asm volatile("inb %1,%0" : "=a" (val) : "d" (port));
     printf(1, "uio: uio succeeded; test FAILED\n");
-    exit();
+    exit(1);
   } else if(pid < 0){
     printf (1, "fork failed\n");
-    exit();
+    exit(1);
   }
-  wait();
+  wait(&status);
   printf(1, "uio test done\n");
 }
 
@@ -1730,7 +1743,7 @@ void argptest()
   fd = open("init", O_RDONLY);
   if (fd < 0) {
     printf(2, "open failed\n");
-    exit();
+    exit(1);
   }
   read(fd, sbrk(0) - 1, -1);
   close(fd);
@@ -1752,7 +1765,7 @@ main(int argc, char *argv[])
 
   if(open("usertests.ran", 0) >= 0){
     printf(1, "already ran user tests -- rebuild fs.img\n");
-    exit();
+    exit(0);
   }
   close(open("usertests.ran", O_CREATE));
 
@@ -1799,5 +1812,5 @@ main(int argc, char *argv[])
 
   exectest();
 
-  exit();
+  exit(0);
 }
diff --git a/usys.S b/usys.S
index 8bfd8a1..067ae2c 100644
--- a/usys.S
+++ b/usys.S
@@ -29,3 +29,8 @@ SYSCALL(getpid)
 SYSCALL(sbrk)
 SYSCALL(sleep)
 SYSCALL(uptime)
+SYSCALL(memsize)
+SYSCALL(set_ps_priority)
+SYSCALL(set_cfs_priority)
+SYSCALL(policy)
+SYSCALL(proc_info)
diff --git a/wc.c b/wc.c
index d6a54df..549a3e8 100644
--- a/wc.c
+++ b/wc.c
@@ -27,7 +27,7 @@ wc(int fd, char *name)
   }
   if(n < 0){
     printf(1, "wc: read error\n");
-    exit();
+    exit(1);
   }
   printf(1, "%d %d %d %s\n", l, w, c, name);
 }
@@ -39,16 +39,16 @@ main(int argc, char *argv[])
 
   if(argc <= 1){
     wc(0, "");
-    exit();
+    exit(0);
   }
 
   for(i = 1; i < argc; i++){
     if((fd = open(argv[i], 0)) < 0){
       printf(1, "wc: cannot open %s\n", argv[i]);
-      exit();
+      exit(1);
     }
     wc(fd, argv[i]);
     close(fd);
   }
-  exit();
+  exit(0);
 }
diff --git a/zombie.c b/zombie.c
index ee817da..c96b92d 100644
--- a/zombie.c
+++ b/zombie.c
@@ -10,5 +10,5 @@ main(void)
 {
   if(fork() > 0)
     sleep(5);  // Let child exit before parent.
-  exit();
+  exit(0);
 }
